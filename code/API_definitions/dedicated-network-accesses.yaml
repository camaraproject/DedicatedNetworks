openapi: 3.0.3
info:
  title: Dedicated Network - Accesses
  description: |

    This API allows for requesting network access for devices. A device is identified by the CAMARA _device object_, containing either an MSIDSN or a Network Access Identifier. For more information about the Dedicated Networks APIs, see the _GeneralDescription_ document in the Dedicated Networks [repository](https://github.com/camaraproject/DedicatedNetworks/).

    A Device Access represents the permission for a specific device or for a group of specific devices to use a Dedicated Network's reserved connectivity resources. Only devices for which a Device Access resource has been created can use the connectivity resources allocated for that network. The usage of resources can be tailored to each device within the constraints of the applicable Network Profile.

    A device is identified by the CAMARA `device` object, where at least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier assigned by the mobile network operator for the device.

    Notes:
    1. Support for using an IP address as device identifier is not recommended when the IP address may change. The API invoker may not be able to associate the accesses resource with the targeted device anymore.<br>Further, the device may be offline at time of Accesses API usage, thus, no IP address assigned.
    1. Network Access Identifier is defined for future use and will not be supported with this version of the API.

    # Authorization and authentication

    The "Camara Security and Interoperability Profile" provides details of how an API consumer requests an access token. Please refer to Identity and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the profile.

    The specific authorization flows to be used will be agreed upon during the onboarding process, happening between the API consumer and the API provider, taking into account the declared purpose for accessing the API, whilst also being subject to the prevailing legal framework dictated by local legislation.

    In cases where personal data is processed by the API and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of three-legged access tokens is mandatory. This ensures that the API remains in compliance with privacy regulations, upholding the principles of transparency and user-centric privacy-by-design.

    # Identifying the device from the access token

    This API requires the API consumer to identify a device as the subject of the API as follows:
    - When the API is invoked using a two-legged access token, the subject will be identified from the `device`, which therefore MUST be provided either individually or in a device group.
    - When a three-legged access token is used however, this optional identifier MUST NOT be provided nor a device group can be used, as the subject will be uniquely identified from the access token.

    This approach simplifies API usage for API consumers using a three-legged access token to invoke the API by relying on the information that is associated with the access token and was identified during the authentication process.

    ## Error handling:

    - If the subject cannot be identified from the access token and the optional `device` object is not included in the request, then the server will return an error with the `422 MISSING_IDENTIFIER` error code.
    - If the subject can be identified from the access token and the optional `device` object is also included in the request, then the server will return an error with the `422 UNNECESSARY_IDENTIFIER` error code. This will be the case even if the same `device` is identified by these two methods, as the server is unable to make this comparison.

    # Creating a device access

    A Device Access is created by performing a `POST` operation on the `/accesses` endpoint.

    The API Consumer provides the following information

    - the networkId to which access is being given

    - either the identifier of the device - either in `device` object or in the token (see "Identifying the device from the access token" above) - or the device group identifier (see "Creating a device group")

    - optionally, a default QoS Profile can be set for the device(s) (see Network Profiles section in the dedicated-network-profiles API in the [Dedicated Networks repository](https://github.com/camaraproject/DedicatedNetworks/)).

    - optionally, a subset of QoS Profiles from this network can be provided to further restrict which QoS Profiles the device(s) can access

    The API returns an accessId which is needed to query the status of the Device Access (GET /accesses/{accessId}) and to delete Access (DELETE accesses/{accessId}).

    # Querying one or more device accesses

    All available device accesses of the API consumer can be queried by performing a `GET` operation on the `/accesses` endpoint. The query can be filted for accesses to a specific network (networkId) or for certain devices.

    A specific device access of the API consumer can be queried by performing a `GET` operation on the `/accesses/{accessId}` endpoint, where the accessId has been obtained during the _create_ procedure.

    # Deleting a device accesses

    A specific device access of the API consumer can be deleted by performing a `DELETE` operation on the `/accesses/{accessId}` endpoint. Deletion of the access can be interpreted as removal of the access permissions.

    # Creating a device group

    A Device Group is created by performing a `POST` operation on the `/device-groups` endpoint.

    The API Consumer provides the following information

    - list of devices included in the device group (which may be empty)

    - optionally, a name for the device group

    - optionally, a description of the device group

    The API returns a deviceGroupId which is needed to query, modify, and delete the Device Group.

    # Reading a device group

    A specific device group of the API consumer can be read by performing a `GET` operation on the `/device-groups/{deviceGroupId}` endpoint, where the deviceGroupId has been obtained during the _create_ procedure.

    # Modifying a device group

    A Device Group can be modified by performing a `PATCH` operation on the `/device-groups/{deviceGroupId}` endpoint. The operation complies with the standard JSON PATCH operation specified in IETF RFC 6902.

    The API Consumer may modify the following information

    - the list of devices included in the device group (which may be empty). Modification of the list can be interpreted as modification of the access permissions.

    - the name for the device group

    - the description of the device group

    # Deleting a device group

    A specific device group of the API consumer can be deleted by performing a `DELETE` operation on the `/device-groups/{deviceGroupId}` endpoint. Deletion of the device group will fail if the device group is used in any device access.

    ## Error handling

    - If the device group is used (referred to) by any access, then the server will return an error with the `409 RESOURCE_IN_USE` error code.

    # Additional CAMARA error responses

    The list of error codes in this API specification is not exhaustive. Therefore the API specification may not document some non-mandatory error statuses as indicated in `CAMARA API Design Guide`.

    Please refer to the `CAMARA_common.yaml` of the Commonalities Release associated to this API version for a complete list of error responses. The applicable Commonalities Release can be identified in the `API Readiness Checklist` document associated to this API version.

    As a specific rule, error `501 - NOT_IMPLEMENTED` can be only a possible error response if it is explicitly documented in the API.

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
  x-camara-commonalities: 0.6
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/DedicatedNetworks
servers:
  - url: "{apiRoot}/dedicated-network-accesses/vwip"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
tags:
  - name: Accesses
    description: Manage accesses of devices for a dedicated network
paths:

  /accesses:
    get:
      tags:
        - Accesses
      summary: Get a list of device accesses to dedicated networks, optionally filtered for a given device and/or for a given dedicated network
      operationId: listNetworkAccesses
      security:
        - openId:
            - dedicated-network-accesses:accesses:read
      parameters:
        - name: networkId
          in: query
          description: Dedicated network id
          schema:
            $ref: '#/components/schemas/NetworkId'
        - name: deviceGroupId
          in: query
          description: Device group id
          schema:
            $ref: '#/components/schemas/DeviceGroupId'
        - $ref: "#/components/parameters/x-device"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '200':
          description: List of existing device accesses to dedicated networks, optionally filtered for a given device or a device group and/or for a dedicated network (the list can be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkAccessInfo'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
    post:
      tags:
        - Accesses
      summary: Create a device access to a dedicated network with given configuration
      description: |
        **NOTE:**
          - When the API allows usage of a two-legged access token and the invoker uses it, the optional `device` object shall be present.
      operationId: createNetworkAccess
      security:
        - openId:
            - dedicated-network-accesses:accesses:create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetworkAccess'
      responses:
        '201':
          description: Successful creation of network access for a device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkAccessInfo'
          headers:
            Location:
              description: 'URL including the resource identifier of the newly created network access.'
              required: true
              schema:
                type: string
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "422":
          $ref: "#/components/responses/Generic422"

  /accesses/{accessId}:
    get:
      tags:
        - Accesses
      summary: Get a device access to the dedicated network and its configuration
      operationId: readNetworkAccess
      security:
        - openId:
            - dedicated-network-accesses:accesses:read
      parameters:
        - name: accessId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/AccessId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '200':
          description: A device access to the dedicated network with configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkAccessInfo'
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

    delete:
      tags:
        - Accesses
      summary: Delete a device access to the dedicated network
      operationId: deleteNetworkAccess
      security:
        - openId:
            - dedicated-network-accesses:accesses:delete
      parameters:
        - name: accessId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/AccessId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '204':
          description: Successful deletion of a device access
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

  /device-groups:
    post:
      tags:
        - Device Groups
      summary: Create a device group with given list of devices
      operationId: createDeviceGroup
      security:
        - openId:
            - dedicated-network-accesses:device-groups:create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceGroup'
      responses:
        '201':
          description: Successful creation of device group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceGroupInfo'
          headers:
            Location:
              description: 'URL including the resource identifier of the newly created device group.'
              required: true
              schema:
                type: string
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

  /device-groups/{deviceGroupId}:
    get:
      tags:
        - Device Groups
      summary: Get a device group and its configuration
      operationId: readDeviceGroup
      security:
        - openId:
            - dedicated-network-accesses:device-groups:read
      parameters:
        - name: deviceGroupId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DeviceGroupId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '200':
          description: A device group with configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceGroupInfo'
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

    patch:
      tags:
        - Device Groups
      summary: Update a device group and its configuration
      description: An update operation for a device group and its configuration. NOTE that the 'id' property cannot be updated.
      operationId: updateDeviceGroup
      security:
        - openId:
            - dedicated-network-accesses:device-groups:update
      parameters:
        - name: deviceGroupId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DeviceGroupId"
        - $ref: "#/components/parameters/x-correlator"
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/GenericPatchRequest'
            examples:
              UPDATE_DEVICE_GROUP_NAME_AND_DESCRIPTION_EXAMPLE:
                summary: Update of device group name and descripton
                description: JSON Patch operations to replace device group name and descripton
                value:
                  - op: replace
                    path: /name
                    value: Site1
                  - op: replace
                    path: /description
                    value: All IoT devices located at Site1
              ADD_DEVICE_AT_BEGINNING:
                summary: Add device to the beginning of device list
                description: JSON Patch operations to insert device object at the beginning of the list of devices
                value:
                  - op: add
                    path: /devices/0
                    value:
                      phoneNumber: "+46123456789"
              REMOVE_DEVICE_FROM_BEGINNING:
                summary: Remove matching device from the beginning of device list
                description: JSON Patch operations to remove device object from beginning of the list of devices as long as it matches the given device object
                value:
                  - op: remove
                    path: /devices/0
                  - op: test
                    path: /devices/0
                    value:
                      phoneNumber: "+46123456789"

      responses:
        '200':
          description: A device group with configuration after successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceGroupInfo'
        '204':
          description: Successful update of a device access group
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"

    delete:
      tags:
        - Device Groups
      summary: Delete a device group
      operationId: deleteDeviceGroup
      security:
        - openId:
            - dedicated-network-accesses:device-groups:delete
      parameters:
        - name: deviceGroupId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/DeviceGroupId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '204':
          description: Successful deletion of a device access group
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "409":
          $ref: "#/components/responses/Generic409"

components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"
    x-device:
      name: x-device
      in: header
      description: Device object represented in a header
        Device object (#/components/schemas/Device") represented in a header.
        It is serialized according to RFC 8941 as a structured field value where
        the Device object is a dictionary, with the following additonal provisions
          - property names are changed to lower case to comply with the RFC
          - serializing property values must comply with the RFC depending on the type, and in particular
            - if the property value is a string which contains only ASCII characters, the string can be serialized as String,
              as per section 3.3.3 of the RFC
            - if the property value is a string and contains non-ASCII characters, the string must be serialized as Byte Sequence using UTF-8 encoding,
              as per section 3.3.5 of the RFC
      schema:
        type: string
      example: 'phonenumber="+123456789"'

  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        $ref: "#/components/schemas/XCorrelator"

  schemas:
    XCorrelator:
      type: string
      pattern: ^[a-zA-Z0-9-_:;.\/<>{}]{0,256}$
      example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"

    NetworkId:
      description: Network id in UUID format
      type: string
      format: uuid

    AccessId:
      description: Network access id in UUID format
      type: string
      format: uuid

    DeviceGroupId:
      description: Device group id in UUID format
      type: string
      format: uuid

    BaseNetworkAccessInfo:
      description: Common attributes of a device access to a dedicated network
      type: object
      properties:
        networkId:
          $ref: "#/components/schemas/NetworkId"
        devices:
          $ref: "#/components/schemas/AccessDevices"
        qosProfiles:
          description: (Optional) List of supported QOS profiles usable for the device. When absent, all QosProfiles of the Network are supported. Only a subset of the QOS profiles of the network is allowed
          type: array
          items:
            type: string
          minItems: 1
        defaultQosProfile:
          description: (Optional) The default QOS profile of a device access. When absent, the defaultQosProfile of the Network is used
          type: string
      required:
        - networkId
        - devices

    CreateNetworkAccess:
      description: Attributes required to create a dedicated network access for a device.
      # NOTE this design prepares for adding request specific attributes later
      allOf:
        - $ref: "#/components/schemas/BaseNetworkAccessInfo"

    NetworkAccessInfo:
      description: Inforamtion about a dedicated network access for a device
      allOf:
        - $ref: "#/components/schemas/BaseNetworkAccessInfo"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/AccessId"
          required:
            - id

    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators.
            The developer can choose to provide the below specified device identifiers:
            * `ipv4Address`
            * `ipv6Address`
            * `phoneNumber`
            * `networkAccessIdentifier`
            NOTE1: the network operator might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different network operators. In this case the identifiers MUST belong to the same device.
            NOTE2: as for this Commonalities release, we are enforcing that the networkAccessIdentifier is only part of the schema for future-proofing, and CAMARA does not currently allow its use. After the CAMARA meta-release work is concluded and the relevant issues are resolved, its use will need to be explicitly documented in the guidelines.
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/DeviceIpv6Address"
      minProperties: 1

    BaseDeviceGroupInfo:
      description: Common attributes of a device group
      type: object
      properties:
        devices:
          description: list of devices included in the device group, which may be empty.
          type: array
          items:
            $ref: '#/components/schemas/Device'
        name:
          type: string
        description:
          type: string
      required:
        - devices

    DeviceGroupInfo:
      description: Inforamtion about a device group
      allOf:
        - $ref: "#/components/schemas/BaseDeviceGroupInfo"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/DeviceGroupId"
          required:
            - id

    AccessDevices:
      description: A device or a device group with access a dedicated network
      oneOf:
        - $ref: "#/components/schemas/Device"
        - $ref: "#/components/schemas/DeviceGroupId"

    CreateDeviceGroup:
      description: Attributes required to create a device group.
      # NOTE this API design prepares for adding request specific attributes later
      allOf:
        - $ref: "#/components/schemas/BaseDeviceGroupInfo"

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'.
      type: string
      pattern: '^\+[1-9][0-9]{4,14}$'
      example: "+123456789"

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).

        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.

        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)

        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
        publicAddress: "84.125.93.10"
        publicPort: 59765

    SingleIpv4Addr:
      description: A single IPv4 address with no subnet mask
      type: string
      format: ipv4
      example: "84.125.93.10"

    Port:
      description: TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    DeviceIpv6Address:
      description: |
        The device should be identified by the observed IPv6 address, or by any single IPv6 address from within the subnet allocated to the device (e.g. adding ::0 to the /64 prefix).
      type: string
      format: ipv6
      example: 2001:db8:85a3:8d3:1319:8a2e:370:7344

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: A human-readable code to describe the error
        message:
          type: string
          description: A human-readable description of what the event represents

    GenericPatchRequest:
      type: array
      items:
        $ref: "#/components/schemas/GenericPatchOperation"

    GenericPatchOperation:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer as defined by RFC 6901
        value:
          $ref: "#/components/schemas/GenericPatchOperationValue"
        from:
          type: string
          description: A string containing a JSON Pointer value.

    GenericPatchOperationValue:
      description: The value to be used within the operations.
      anyOf:
        - type: string
        - type: number
        - type: object
        - type: array
        - type: boolean
        - type: "null"

  responses:
    Generic400:
      description: Bad Request
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - INVALID_ARGUMENT
                      - OUT_OF_RANGE
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.

    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated and a new authentication is required
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials. A new authentication is required.

    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - INVALID_TOKEN_CONTEXT
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            GENERIC_403_INVALID_TOKEN_CONTEXT:
              description: Reflect some inconsistency between information in some field of the API and the related OAuth2 Token
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: "{{field}} is not consistent with access token."

    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Some identifier cannot be matched to a device
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Device identifier not found.

    Generic409:
      description: Conflict
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 409
                  code:
                    enum:
                      - CONFLICT
                      - RESOURCE_IN_USE
          examples:
            GENERIC_409_CONFLICT:
              description: Request is in conflict with another request or another resource
              value:
                status: 409
                code: CONFLICT
                message: Access to the target resource is in conflict with another request or another resource.
            GENERIC_409_RESOURCE_IN_USE:
              description: Resource is in use
              value:
                status: 409
                code: RESOURCE_IN_USE
                message: Access to the target resource is not permitted because the resource is in use.

    Generic410:
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 410
                  code:
                    enum:
                      - GONE
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate that its callback is no longer available
              value:
                status: 410
                code: GONE
                message: Access to the target resource is no longer available.

    Generic422:
      description: Unprocessable Content
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorInfo"
              - type: object
                properties:
                  status:
                    enum:
                      - 422
                  code:
                    enum:
                      - SERVICE_NOT_APPLICABLE
                      - MISSING_IDENTIFIER
                      - UNSUPPORTED_IDENTIFIER
                      - UNNECESSARY_IDENTIFIER
          examples:
            GENERIC_422_SERVICE_NOT_APPLICABLE:
              description: Service not applicable for the provided identifier
              value:
                status: 422
                code: SERVICE_NOT_APPLICABLE
                message: The service is not available for the provided identifier.
            GENERIC_422_MISSING_IDENTIFIER:
              description: An identifier is not included in the request and the device or phone number identification cannot be derived from the 3-legged access token
              value:
                status: 422
                code: MISSING_IDENTIFIER
                message: The device cannot be identified.
            GENERIC_422_UNSUPPORTED_IDENTIFIER:
              description: None of the provided identifiers is supported by the implementation
              value:
                status: 422
                code: UNSUPPORTED_IDENTIFIER
                message: The identifier provided is not supported.
            GENERIC_422_UNNECESSARY_IDENTIFIER:
              description: An explicit identifier is provided when a device or phone number has already been identified from the access token
              value:
                status: 422
                code: UNNECESSARY_IDENTIFIER
                message: The device is already identified by the access token.
