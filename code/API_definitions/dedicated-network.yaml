openapi: 3.0.3
info:
  title: Dedicated Network - Networks API
  description: |
    This API allows for requesting a Dedicated Network, which provides a set of capabilities and connectivity performance targets. The Dedicated Network may be requested for a particular geographical location and at a particular time window. Depending on the requested start time for the dedicated network, the network may first enter a _reserved_ state.
    # High Level Description
    ## Introduction
    _Dedicated Networks_ enable dedicated use of public network connectivity resources by reserving some of these resources for use by devices and applications. To these devices and applications, the reserved resources appear as their own virtual or logical network.

    Fixed and Mobile Networks already offer the capability of separating devices into different networks. These concepts are sometimes called logical networks or virtual private networks. Multiple of these networks can coexist on the same physical network and can separate target traffic from other traffic for assured performance, enhanced security and other scenarios where consistent experience is required.

    There are different options to technically realize a Dedicated Network. For example:

    - Using 5G Network Slices (see 3GPP 23.501, clause 5.15)

    - Using 5G Non-Public Networks (NPN), specifically the Public Network Integrated NPN (PNI-NPN), see 3GPP 23.501, clause 5.30)

    - Using a separate 4G APN (see 3GPP 23.401) or 5G DNNs (see 3GPP 23.501). Note, a DNN is equivalent to an APN, per 3GPP 23.003.

    Dedicated Networks abstract the complexity across **Network Provider** realizations to enable coherent use of diverse network capabilities.

    A Dedicated Network is often only needed for a specific time duration (e.g. one hour) and at specific locations (e.g. the area of a festival). These are referred to as Service Time and Service Area.

    The CAMARA Dedicated Network APIs allow **API Consumers** to programmatically manage Dedicated Networks, without the need for in-depth knowledge of telecommunications systems.

    API Consumers have control over which devices are allowed to access and use the reserved network connectivity resources. In addition, network connectivity characteristics, for example, routing and performance may be individually tailored for each device.

    Detailed characteristics, behaviors and costs pertaining to Dedicated Networks are typically described by the **API Provider** in the terms and conditions. Such terms and conditions may also contain obligations and restrictions.

    An API Provider realizes Dedicated Networks based on the physical network resources managed by a Network Provider. An API Provider can be the Network Provider.

    Key roles
    <table>
    <tr>
    <td>Role Name</td>
    <td>Description</td>
    </tr>

    <tr>
    <td>API Consumer</td>
    <td>The entity that consumes the Dedicated Network APIs</td>
    </tr>
    <tr>
    <td>API Provider</td>
    <td>The entity that provides the Dedicated Network APIs</td>
    </tr>
    <tr>
    <td>Network Provider</td>
    <td>The entity that provides the physical network resources</td>
    </tr>
    
    </table>

    ## Dedicated Network APIs

    The CAMARA Dedicated Network APIs allow for programmatic management of Dedicated Networks, without the need for in-depth knowledge of telecommunications systems.

    The APIs are summarized in the table below followed by a brief description. Detailed descriptions are provided within each specification.

    <table>
    <tr>
    <td>API</td>
    <td>Purpose of the API</td>
    <td>Key Abstractions and concepts</td>
    </tr>

    <tr>
    <td>Dedicated Network API</td>
    <td>Reservation and lifecycle management of network connectivity resources for dedicated use.</td>
    <td>A Dedicated Network is a logical resource and is used to embody the reservation of network connectivity resources in the physical network. Initiating a new reservation request using this API results in a new Dedicated Network resource being created. The Dedicated Network undergoes various lifecycle States including REQUESTED, RESERVED, ACTIVATED and TERMINATED. Reservation of resources occurs based on the selected Network Profile, duration when the reservation is needed (Service Time) and geographical areas where the service is needed (Service Area).</td>
    </tr>

    <tr>
    <td>Dedicated Network Profiles API</td>
    <td>Discovery of predefined set of network capabilities and performance characteristics</td>
    <td>A Network Profile represents a predefined set of network capabilities and performance characteristics that can be applied when creating dedicated networks. Each profile represents a validated, supported configuration that has been pre-approved in the terms and conditions between the API Provider and API Consumer.</td>
    </tr>

    <tr>
    <td>Dedicated Network Accesses API</td>
    <td>Managing access to the Dedicated Network, i.e., controlling which devices may benefit from the reserved resources and capabilities</td>
    <td>A Device Access represents the permission for a specific device to use a Dedicated Network's reserved connectivity resources. The usage of resources can be tailored to each device within the constraints of the applicable Network Profile.</td>
    </tr>

    </table>

    A high-level sequence of steps involved when using Dedicated Network APIs is depicted in the diagram below and further described in their respective sections.
    
    **Figure**: High-level sequence of steps<br>
    <!-- ![figure HighLevelSequenceOfSteps.svg](https://raw.githubusercontent.com/camaraproject/DedicatedNetworks/blob/main/documentation/API_documentation/resources/HighLevelSequenceOfSteps.svg)-->
    <img alt="figure HighLevelSequenceOfSteps.svg" src="https://raw.githubusercontent.com/tlohmar/DedicatedNetworks/refs/heads/description/documentation/API_documentation/resources/HighLevelSequenceOfSteps.svg" width="200"/>

    ## Pre-requisites

    Before Dedicated Network APIs can be invoked, relevant agreements need to be in place between the API Consumer and the API Provider. Conceptually, the agreement contains all the different terms and conditions, which typically include price, service descriptions and conditions. It also includes obligations and restrictions possibly for both, the API Provider and the API Consumer, etc.

    An API Provider may provide a catalog where API Consumers can get an overview of the various options available. For example, there may be a catalog of available APIs, and a catalog of available parameter sets for each of the APIs.

    The API Provider may also offer a procedure for requesting additional customization, for example, additional Service Areas or Network Profiles. Such a procedure can leverage conventional methods such as emails or phone conversations.

    API Consumers selects from available Network Profiles and Service Areas offered by the API Provider which then become part of the agreed terms and conditions.

    This preparation phase is **outside the scope** of the Dedicated Network APIs.

    As result of the agreement on the terms and conditions, the following aspects are determined

    - URLs and credentials for the API Consumer to use

    - A set of capabilities and performance targets (Network Profiles) that an API Consumer is eligible to use

    - A set of geographic areas (Service Areas) that an API Consumer is eligible to use

    - The API Consumer is aware about the terms and conditions (incl price), when selecting different parameter or parameter combinations according to the conditions.

    Note that, at completion of the pre-requisites, no network connectivity resources are reserved, i.e., no Dedicated Network is created.

    ## Detailed high-level flow
    The diagram below attempts to depict the complete flow including API endpoint, response codes, and key parameters.

    **Figure**: High Level Flow with additional details

    <img alt="figure HighLevelFlowWithAdditionalDetails.svg" src="https://raw.githubusercontent.com/tlohmar/DedicatedNetworks/refs/heads/description/documentation/API_documentation/resources/HighLevelFlowWithAdditionalDetails.svg" width="1200"/>

    # Dedicated Network API

    The Dedicated Network API enables programmatic creation and lifecycle management of dedicated network connectivity resources on a public network.

    A Dedicated Network is a logical resource and is used to embody the reservation of network connectivity resources in the physical network. The act of reservation is equivalent to creating a new Dedicated Network resource via the REST APIs.

    A Dedicated Network undergoes various States including REQUESTED, RESERVED, ACTIVATED and TERMINATED.

    Reservation of resources occurs based on the selected Network Profile, duration when the reservation is needed (Service Time) and geographical areas when the service is needed (Service Area).

    The Dedicated Network API provides a /networks endpoint that allows API Consumers to create a Dedicated Network, delete the Delete Network, list the existing Dedicated Networks and view details of a specific Dedicate Network.

    ## Creating a Dedicated Network

    A Dedicated Network is created by performing a POST operation on the /networks endpoint.

    The API Consumer needs to provide the following input parameters to create a network:

    - the chosen Network Profile (profileId)

    - the Service Area

    - the service start and end times (Service Time).

    - Optionally, callback related information through sink and sinkCredential parameters to receive notifications about the lifecycle events of the network.

    The API returns a networkId. The networkId is a unique identifier of the network, which remains unchanged during its lifetime. The networkId is required when creating Device Accesses.

    On successful acceptance of the request, an HTTP resource is created. The response always returns a REQUESTED State. Reserved resources are only usable when the network is in ACTIVATED state.

    A normal lifecycle is depicted below:
    
    **Figure**: Normal lifecycle<br>
    <img alt="figure NormalLifecycle.svg" src="https://raw.githubusercontent.com/tlohmar/DedicatedNetworks/refs/heads/description/documentation/API_documentation/resources/NormalLifecycle.svg" width="200"/>

    A more detailed explanation of the states is provided below:<br>
    **Figure**: Dedicate Network States<br>
    <img alt="figure DedicateNetworkStates.svg" src="https://raw.githubusercontent.com/tlohmar/DedicatedNetworks/refs/heads/description/documentation/API_documentation/resources/DedicateNetworkStates.svg" width="400"/>

    A network in REQUESTED state is not (yet) committed by the Network Provider.

    A network in RESERVED state is committed to be available for use during the Service Time by the Network Provider.

    The targeted resources of the network are free to be used by other users or for other purposes, while the network is in RESERVED state.

    Reserved resources are only usable when the network is in ACTIVATED state.

    The network may enter the ACTIVATED state directly after the REQUESTED state if the service start time has been reached when the API Provider successfully completed the resource reservation.

    The network may enter the TERMINATED state directly after the REQUESTED state if the API Provider could not complete the resource reservation.

    A network in TERMINATED state cannot be modified anymore and should be deleted. If not deleted by the API Consumer, the representing HTTP resource (URL) may be removed by the API Provider.

    ## Querying a Dedicated Network

    To be expanded

    ## Deleting A Dedicated Network

    To be expanded
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip
  x-camara-commonalities: 0.5
servers:
  - url: "{apiRoot}/dedicated-network/vwip"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root, defined by the service provider, e.g. `api.example.com` or `api.example.com/somepath`
tags:
  - name: Networks
    description: Manage a dedicated network
paths:
  /networks:
    get:
      tags:
        - Networks
      summary: Get a list of dedicated networks
      operationId: listNetworks
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '200':
          description: List of dedicated networks (the list can be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkInfo'
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    post:
      tags:
        - Networks
      summary: Request to create a dedicated network
      operationId: createNetwork
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNetwork'
      parameters:
        - $ref: "#/components/parameters/x-correlator"
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              tags:
                - Network status callback
              summary: "Network status notifications callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                It will be called upon change of the network request status.
                Currently only NETWORK_STATUS_CHANGED event is defined.
              operationId: postNotification
              parameters:
                - $ref: "#/components/parameters/x-correlator"
              requestBody:
                required: true
                content:
                  application/cloudevents+json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      NETWORK_STATUS_CHANGED_EXAMPLE:
                        $ref: "#/components/examples/NETWORK_STATUS_CHANGED_EXAMPLE"
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: '#/components/headers/x-correlator'
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "410":
                  $ref: "#/components/responses/Generic410"
                "500":
                  $ref: "#/components/responses/Generic500"
                "503":
                  $ref: "#/components/responses/Generic503"
              security:
                - {}
                - notificationsBearerAuth: []
      responses:
        '201':
          description: Reception acknowlegement a dedicated network request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkInfo'
          headers:
            Location:
              description: 'URL including the resource identifier of the newly created dedicated network.'
              required: true
              schema:
                type: string
                format: uri
        '400':
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"

  /networks/{networkId}:
    get:
      tags:
        - Networks
      summary: Get the current information about a dedicated network
      operationId: readNetwork
      parameters:
        - name: networkId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/NetworkId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '200':
          description: Current dedicated network information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkInfo'
        '400':
          $ref: "#/components/responses/Generic400"
        '404':
          $ref: "#/components/responses/Generic404"
    delete:
      tags:
        - Networks
      summary: Destroy a dedicated network
      operationId: deleteNetwork
      parameters:
        - name: networkId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/NetworkId"
        - $ref: "#/components/parameters/x-correlator"
      responses:
        '204':
          description: Successful deletion of a dedicated network
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"

components:
  securitySchemes:
    notificationsBearerAuth:
      description: Bearer authentication for notifications
      type: http
      scheme: bearer
      bearerFormat: "{$request.body#sinkCredential.credentialType}"

  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string

  schemas:
    NetworkId:
      description: Network id in UUID format
      type: string
      format: uuid

    BaseNetworkInfo:
      description: Common attributes of a dedicated network
      type: object
      properties:
        profileId:
          $ref: 'dedicated-network-profiles.yaml#/components/schemas/NetworkProfileId'
        serviceTime:
          $ref: '#/components/schemas/ServiceTime'
        serviceArea:
          $ref: '#/components/schemas/Area'
        sink:
          description: Notification sink for sending notifications
          type: string
          format: uri
        sinkCredential:
          $ref: '#/components/schemas/SinkCredential'
      required:
        - profileId
        - serviceTime
        - serviceArea

    NetworkInfo:
      description: Current dedicated network information
      allOf:
        - $ref: "#/components/schemas/BaseNetworkInfo"
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/NetworkId'
            status:
              $ref: '#/components/schemas/NetworkStatus'
          required:
            - id
            - status

    CreateNetwork:
      description: Attributes required to create a dedicated network
      # NOTE this design prepares for adding request specific attributes later
      allOf:
        - $ref: "#/components/schemas/BaseNetworkInfo"

    NetworkStatus:
      description: |
        The current status of the requested network. The status can be one of the following:
        * `REQUESTED` - The DN is requested, but not approved. Possible transitions to RESERVED, ACTIVATED and TERMINATED states
        * `RESERVED` - Request is accepted by the CSP (CSP has committed the requested resources), but the Network cannot be used (outside of requested time-window)
        * `ACTIVATED` - Network turns from reserved into Activated. Now, devices with access can use the network. Possible transitions to RESERVED or TERMINATED states
        * `TERMINATED` - The Network resource is used and up for deletion. The API does not allow any action (except delete).

      type: string
      enum:
        - REQUESTED
        - RESERVED
        - ACTIVATED
        - TERMINATED

    CloudEvent:
      description: Event compliant with the CloudEvents specification
      required:
        - id
        - source
        - specversion
        - type
        - time
      properties:
        id:
          description: Identifier of this event, that must be unique in the source context.
          type: string
        source:
          description: Identifies the context in which an event happened in the specific Provider Implementation.
          type: string
          format: uri-reference
        type:
          description: The type of the event.
          type: string
          enum:
            - "org.camaraproject.dedicated-networks.v0.network-status-changed"
        specversion:
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          type: string
          enum:
            - '1.0'
        datacontenttype:
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          type: string
          enum:
            - 'application/json'
        data:
          description: Event notification details payload, which depends on the event type
          type: object
        time:
          description: |
            Timestamp of when the occurrence happened. It must follow RFC 3339
          type: string
          format: date-time
      discriminator:
        propertyName: 'type'
        mapping:
          org.camaraproject.dedicated-networks.v0.network-status-changed: "#/components/schemas/EventNetworkStatusChanged"

    EventNetworkStatusChanged:
      description: Event to notify a network status change
      type: object
      properties:
        data:
          type: object
          description: Status change details
          required:
            - networkId
            - status
          properties:
            networkId:
              $ref: "#/components/schemas/NetworkId"
            status:
              $ref: "#/components/schemas/NetworkStatus"
      required:
        - data

    ServiceTime:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
      required:
        - start
        - end

    Area:
      description: Base schema for all areas
      type: object
      properties:
        areaType:
          $ref: "#/components/schemas/AreaType"
      required:
        - areaType
      discriminator:
        propertyName: areaType
        mapping:
          AREANAME: "#/components/schemas/AreaName"

    AreaType:
      type: string
      description: |
        Type of this area.
        AREANAME - The area is defined by an area name
      enum:
        - AREANAME

    AreaName:
      description: Name of a predefined area
      allOf:
        - $ref: "#/components/schemas/Area"
        - type: object
          required:
            - areaName
          properties:
            areaName:
              type: string

    SinkCredential:
      type: object
      properties:
        credentialType:
          type: string
          enum:
            - PLAIN
            - ACCESSTOKEN
            - REFRESHTOKEN
      discriminator:
        propertyName: credentialType
        mapping:
          PLAIN: '#/components/schemas/PlainCredential'
          ACCESSTOKEN: '#/components/schemas/AccessTokenCredential'
          REFRESHTOKEN: '#/components/schemas/RefreshTokenCredential'
      required:
        - credentialType

    PlainCredential:
      type: object
      description: A plain credential as a combination of an identifier and a secret.
      allOf:
        - $ref: '#/components/schemas/SinkCredential'
        - type: object
          required:
            - identifier
            - secret
          properties:
            identifier:
              description: The identifier might be an account or username.
              type: string
            secret:
              description: The secret might be a password or passphrase.
              type: string

    AccessTokenCredential:
      type: object
      description: An access token credential.
      allOf:
        - $ref: '#/components/schemas/SinkCredential'
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: REQUIRED. An absolute UTC instant at which the token shall be considered expired.
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)). For the current version of the API the type MUST be set to `Bearer`.
              type: string
              enum:
                - bearer
          required:
            - accessToken
            - accessTokenExpiresUtc
            - accessTokenType

    RefreshTokenCredential:
      type: object
      description: An access token credential with a refresh token.
      allOf:
        - $ref: '#/components/schemas/SinkCredential'
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: REQUIRED. An absolute UTC instant at which the token shall be considered expired.
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
            refreshToken:
              description: REQUIRED. An refresh token credential used to acquire access tokens.
              type: string
            refreshTokenEndpoint:
              type: string
              format: uri
              description: REQUIRED. A URL at which the refresh token can be traded for an access token.
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType
        - refreshToken
        - refreshTokenEndpoint

    ErrorInfo:
      description: Common schema for errors
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
      required:
        - status
        - code
        - message

  responses:
    Generic400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid Argument. Generic Syntax Exception
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: Client specified an invalid argument, request body or query param.
            GENERIC_400_OUT_OF_RANGE:
              description: Out of Range. Specific Syntax Exception used when a given field has a pre-defined range or a invalid filter criteria combination is requested
              value:
                status: 400
                code: OUT_OF_RANGE
                message: Client specified an invalid range.

    Generic401:
      description: Unauthorized
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Request cannot be authenticated
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Request not authenticated due to missing, invalid, or expired credentials.
            GENERIC_401_AUTHENTICATION_REQUIRED:
              description: New authentication is needed, authentication is no longer valid
              value:
                status: 401
                code: AUTHENTICATION_REQUIRED
                message: New authentication is required.

    Generic403:
      description: Forbidden
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security
              value:
                status: 403
                code: PERMISSION_DENIED
                message: Client does not have sufficient permissions to perform this action.
            GENERIC_403_INVALID_TOKEN_CONTEXT:
              description: Reflect some inconsistency between information in some field of the API and the related OAuth2 Token
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: "{{field}} is not consistent with access token."

    Generic404:
      description: Not found
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.

    Generic410:
      description: Gone
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_410_GONE:
              description: Use in notifications flow to allow API Consumer to indicate that its callback is no longer available
              value:
                status: 410
                code: GONE
                message: Access to the target resource is no longer available.

    Generic500:
      description: Internal server error
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error: ..."

    Generic503:
      description: Service Unavailable
      headers:
        x-correlator:
          $ref: "#/components/headers/x-correlator"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            GENERIC_503_UNAVAILABLE:
              description: Service is not available. Temporary situation usually related to maintenance process in the server side
              value:
                status: 503
                code: UNAVAILABLE
                message: Service Unavailable.

  examples:

    NETWORK_STATUS_CHANGED_EXAMPLE:
      summary: Network status changed
      description: Cloud event example for network status change to ACTIVATED
      value:
        id: 625b2d4b-4da7-4f07-9169-e60ffdf7667c
        source: 'https://api.example.com/dedicated-networks/v0/networks/b69e5404-3871-448d-8f9f-11dc5d29a4c8'
        specversion: '1.0'
        type: "org.camaraproject.dedicated-networks.v0.network-status-changed"
        time: '2024-11-29T13:04:00Z'
        data:
          networkId: 'b69e5404-3871-448d-8f9f-11dc5d29a4c8'
          status: 'ACTIVATED'
